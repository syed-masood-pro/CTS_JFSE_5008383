1) Explain Big O notation and how it helps in analyzing algorithms.

Big O Notation is a mathematical way to describe the efficiency of an algorithm based on its growth rate as the input size (n) increases. It focuses on the upper bound of an algorithm's time complexity, ignoring constant factors and lower-order terms.

2)Describe the best, average, and worst-case scenarios for search operations.

O(1): Constant time - execution time remains constant regardless of input size (e.g., accessing an element by index in an array).
O(log n): Logarithmic time - execution time grows logarithmically with input size (e.g., binary search).
O(n): Linear time - execution time grows linearly with input size (e.g., linear search).
O(n^2): Quadratic time - execution time grows quadratically with input size (e.g., nested loops).



3)Compare the time complexity of linear and binary search algorithms.

Linear Search: O(n) in the worst and average case. Each element needs to be compared in the worst case.

Binary Search: O(log n) in the average and best case. The search space is halved with each comparison. However, the data 
needs to be sorted beforehand, which can add O(n log n) time complexity depending on the sorting algorithm used.

